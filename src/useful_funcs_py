# -*- coding: utf-8 -*-
"""
Created on Wed Mar 26 23:46:05 2025

@author: FPSH706528
"""
import pandas as pd
import numpy as np
import scipy.sparse as sp
import multiprocessing

import time
import torch
import torch.optim as optim
import torch.nn as nn
from torch.utils.data import Dataset, DataLoader
import pickle

from collections import Counter
from tqdm import tqdm


def process_sequence(sequence, context_size):
    local_coocs = Counter()
    seq_length = len(sequence)
    
    for i, center_idx in enumerate(sequence):
        start = max(0, i - context_size)
        end = min(seq_length, i + context_size + 1)
        
        for j in range(start, end):
            if i != j:
                context_idx = sequence[j]
                local_coocs[(center_idx, context_idx)] += 1.0 /abs(i-j)
    return local_coocs


class GloveDataset(Dataset):
    
    def __init__(self, comat: sp.csr_matrix):
        
        rows, cols = comat.nonzero()
        values = comat.data
        
        self.num_nonzero = comat.nnz
        
        self.focal_indices = rows.astype(np.int64)
        self.context_indices = cols.astype(np.int64)
        
        if values.dtype != np.float32:
            self.cooc_values = values.astype(np.float32)
        else:
            self.cooc_values = values
            
    def __len__(self):
        return self.num_nonzero
    
    def __getitem__(self, idx):
        if idx < 0 or idx >= self.num_nonzero:
            raise IndexError("Index out of bouds ")
        return(
            self.focal_indices[idx],
            self.context_indices[idx],
            self.cooc_values[idx]
            )